/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Snaphappi {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;
import com.hurlant.math.BigInteger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  public class SystemException extends Error implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("SystemException");
    private static const ERROR_CODE_FIELD_DESC:TField = new TField("ErrorCode", TType.I32, 1);
    private static const INFORMATION_FIELD_DESC:TField = new TField("Information", TType.STRING, 2);

    /**
     * The numeric code indicating the type of error that has occured.
     */
    private var _ErrorCode:int;
    public static const ERRORCODE:int = 1;
    /**
     * Optional additional information about the error.
     * Note: it is important to avoid conflicts with native exception
     *       fields when naming this member.
     */
    private var _Information:String;
    public static const INFORMATION:int = 2;

    private var __isset_ErrorCode:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ERRORCODE] = new FieldMetaData("ErrorCode", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[INFORMATION] = new FieldMetaData("Information", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(SystemException, metaDataMap);
    }

    public function SystemException() {
    }

    /**
     * The numeric code indicating the type of error that has occured.
     */
    public function get ErrorCode():int {
      return this._ErrorCode;
    }

    /**
     * The numeric code indicating the type of error that has occured.
     */
    public function set ErrorCode(ErrorCode:int):void {
      this._ErrorCode = ErrorCode;
      this.__isset_ErrorCode = true;
    }

    public function unsetErrorCode():void {
      this.__isset_ErrorCode = false;
    }

    // Returns true if field ErrorCode is set (has been assigned a value) and false otherwise
    public function isSetErrorCode():Boolean {
      return this.__isset_ErrorCode;
    }

    /**
     * Optional additional information about the error.
     * Note: it is important to avoid conflicts with native exception
     *       fields when naming this member.
     */
    public function get Information():String {
      return this._Information;
    }

    /**
     * Optional additional information about the error.
     * Note: it is important to avoid conflicts with native exception
     *       fields when naming this member.
     */
    public function set Information(Information:String):void {
      this._Information = Information;
    }

    public function unsetInformation():void {
      this.Information = null;
    }

    // Returns true if field Information is set (has been assigned a value) and false otherwise
    public function isSetInformation():Boolean {
      return this.Information != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ERRORCODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          this.ErrorCode = value;
        }
        break;

      case INFORMATION:
        if (value == null) {
          unsetInformation();
        } else {
          this.Information = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ERRORCODE:
        return this.ErrorCode;
      case INFORMATION:
        return this.Information;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ERRORCODE:
        return isSetErrorCode();
      case INFORMATION:
        return isSetInformation();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ERRORCODE:
            if (field.type == TType.I32) {
              this.ErrorCode = iprot.readI32();
              this.__isset_ErrorCode = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case INFORMATION:
            if (field.type == TType.STRING) {
              this.Information = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      if (!__isset_ErrorCode) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'ErrorCode' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
      oprot.writeI32(this.ErrorCode);
      oprot.writeFieldEnd();
      if (this.Information != null) {
        oprot.writeFieldBegin(INFORMATION_FIELD_DESC);
        oprot.writeString(this.Information);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("SystemException(");
      var first:Boolean = true;

      ret += "ErrorCode:";
      var ErrorCode_name:String = Snaphappi.ErrorCode.VALUES_TO_NAMES[this.ErrorCode];
      if (ErrorCode_name != null) {
        ret += ErrorCode_name;
        ret += " (";
      }
      ret += this.ErrorCode;
      if (ErrorCode_name != null) {
        ret += ")";
      }
      first = false;
      if (isSetInformation()) {
        if (!first) ret +=  ", ";
        ret += "Information:";
        if (this.Information == null) {
          ret += "null";
        } else {
          ret += this.Information;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // alas, we cannot check 'ErrorCode' because it's a primitive and you chose the non-beans generator.
      // check that fields of type enum have valid values
      if (isSetErrorCode() && !Snaphappi.ErrorCode.VALID_VALUES.contains(ErrorCode)){
        throw new TProtocolError(TProtocolError.UNKNOWN, "The field 'ErrorCode' has been assigned the invalid value " + ErrorCode);
      }
    }

  }

}
