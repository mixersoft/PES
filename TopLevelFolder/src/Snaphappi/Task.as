/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package Snaphappi {

import org.apache.thrift.Set;
import flash.utils.ByteArray;
import flash.utils.Dictionary;
import com.hurlant.math.BigInteger;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;


  /**
   * Service for working with the task of servicing the initial upload of files
   * from the user's computer to the server.
   */
  public interface Task {

    /**
     * Add a folder to search.
     * 
     * @param id
     * @param path
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function AddFolder(id:TaskID, path:String, onError:Function, onSuccess:Function):void;

    /**
     * Remove a folder from search.
     * 
     * @param id
     * @param path
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function RemoveFolder(id:TaskID, path:String, onError:Function, onSuccess:Function):void;

    /**
     * Returns the device ID associated with this session or empty string
     * if it is not yet known.
     * 
     * @param authToken
     * @param sessionID
     */
    //function onError(Error):void;
    //function onSuccess(String):void;
    function GetDeviceID(authToken:String, sessionID:String, onError:Function, onSuccess:Function):void;

    /**
     * Return the number of files to be uploaded from a folder.
     * 
     * @param id
     * @param folder
     */
    //function onError(Error):void;
    //function onSuccess(int):void;
    function GetFileCount(id:TaskID, folder:String, onError:Function, onSuccess:Function):void;

    /**
     * Return the list of all files uploaded from the given folder within
     * the device corresponding to the given task ID.
     * 
     * @param id
     * @param folder
     */
    //function onError(Error):void;
    //function onSuccess(Array):void;
    function GetFiles(id:TaskID, folder:String, onError:Function, onSuccess:Function):void;

    /**
     * Return the list of folders to scan for images.
     * 
     * @param id
     */
    //function onError(Error):void;
    //function onSuccess(Array):void;
    function GetFolders(id:TaskID, onError:Function, onSuccess:Function):void;

    /**
     * Retrieves flags indicating the state of the task.
     * 
     * @param id
     */
    //function onError(Error):void;
    //function onSuccess(URTaskState):void;
    function GetState(id:TaskID, onError:Function, onSuccess:Function):void;

    /**
     * Retrieves the list of folders this user has set to be watched.
     * 
     * @param id
     */
    //function onError(Error):void;
    //function onSuccess(Array):void;
    function GetWatchedFolders(id:TaskID, onError:Function, onSuccess:Function):void;

    /**
     * Report the number of files to be uploaded from a folder.
     * 
     * @param id
     * @param folder
     * @param count
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function ReportFileCount(id:TaskID, folder:String, count:int, onError:Function, onSuccess:Function):void;

    /**
     * Report that a folder could not be searched.
     * 
     * @param id
     * @param folder
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function ReportFolderNotFound(id:TaskID, folder:String, onError:Function, onSuccess:Function):void;

    /**
     * Report that all files in a folder have been uploaded.
     * 
     * @param id
     * @param folder
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function ReportFolderUploadComplete(id:TaskID, folder:String, onError:Function, onSuccess:Function):void;

    /**
     * Report a failed upload.
     * 
     * @param id
     * @param folder
     * @param path
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function ReportUploadFailed(id:TaskID, folder:String, path:String, onError:Function, onSuccess:Function):void;

    /**
     * Upload file contents, along with its path and the folder in which it
     * was found.
     * 
     * @param id
     * @param path
     * @param data
     * @param info
     */
    //function onError(Error):void;
    //function onSuccess():void;
    function UploadFile(id:TaskID, path:String, data:ByteArray, info:UploadInfo, onError:Function, onSuccess:Function):void;

  }

}
