<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['snaphappi_api_E_ErrorCode'] = array(
  'Unknown' => 1,
  'InvalidAuth' => 2,
  'DataConflict' => 3,
);

final class ErrorCode {
  const Unknown = 1;
  const InvalidAuth = 2;
  const DataConflict = 3;
  static public $__names = array(
    1 => 'Unknown',
    2 => 'InvalidAuth',
    3 => 'DataConflict',
  );
}

$GLOBALS['snaphappi_api_E_UploadType'] = array(
  'Preview' => 1,
  'Original' => 2,
);

final class UploadType {
  const Preview = 1;
  const Original = 2;
  static public $__names = array(
    1 => 'Preview',
    2 => 'Original',
  );
}

class snaphappi_api_TaskID {
  static $_TSPEC;

  public $AuthToken = null;
  public $Session = null;
  public $DeviceID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'AuthToken',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Session',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'DeviceID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['AuthToken'])) {
        $this->AuthToken = $vals['AuthToken'];
      }
      if (isset($vals['Session'])) {
        $this->Session = $vals['Session'];
      }
      if (isset($vals['DeviceID'])) {
        $this->DeviceID = $vals['DeviceID'];
      }
    }
  }

  public function getName() {
    return 'TaskID';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AuthToken);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Session);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->DeviceID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskID');
    if ($this->AuthToken !== null) {
      $xfer += $output->writeFieldBegin('AuthToken', TType::STRING, 1);
      $xfer += $output->writeString($this->AuthToken);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Session !== null) {
      $xfer += $output->writeFieldBegin('Session', TType::STRING, 2);
      $xfer += $output->writeString($this->Session);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DeviceID !== null) {
      $xfer += $output->writeFieldBegin('DeviceID', TType::STRING, 3);
      $xfer += $output->writeString($this->DeviceID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snaphappi_api_UploadTarget {
  static $_TSPEC;

  public $FilePath = null;
  public $ExifOriginalTimestamp = null;
  public $ImageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'FilePath',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'ExifOriginalTimestamp',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'ImageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['FilePath'])) {
        $this->FilePath = $vals['FilePath'];
      }
      if (isset($vals['ExifOriginalTimestamp'])) {
        $this->ExifOriginalTimestamp = $vals['ExifOriginalTimestamp'];
      }
      if (isset($vals['ImageID'])) {
        $this->ImageID = $vals['ImageID'];
      }
    }
  }

  public function getName() {
    return 'UploadTarget';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->FilePath);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ExifOriginalTimestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ImageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UploadTarget');
    if ($this->FilePath !== null) {
      $xfer += $output->writeFieldBegin('FilePath', TType::STRING, 1);
      $xfer += $output->writeString($this->FilePath);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ExifOriginalTimestamp !== null) {
      $xfer += $output->writeFieldBegin('ExifOriginalTimestamp', TType::I32, 2);
      $xfer += $output->writeI32($this->ExifOriginalTimestamp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ImageID !== null) {
      $xfer += $output->writeFieldBegin('ImageID', TType::STRING, 3);
      $xfer += $output->writeString($this->ImageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snaphappi_api_SystemException extends TException {
  static $_TSPEC;

  public $ErrorCode = null;
  public $Information = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ErrorCode',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'Information',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ErrorCode'])) {
        $this->ErrorCode = $vals['ErrorCode'];
      }
      if (isset($vals['Information'])) {
        $this->Information = $vals['Information'];
      }
    }
  }

  public function getName() {
    return 'SystemException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ErrorCode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Information);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SystemException');
    if ($this->ErrorCode !== null) {
      $xfer += $output->writeFieldBegin('ErrorCode', TType::I32, 1);
      $xfer += $output->writeI32($this->ErrorCode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Information !== null) {
      $xfer += $output->writeFieldBegin('Information', TType::STRING, 2);
      $xfer += $output->writeString($this->Information);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snaphappi_api_TaskState {
  static $_TSPEC;

  public $IsCancelled = null;
  public $FolderUpdateCount = null;
  public $FileUpdateCount = null;
  public $FilesToUploadUpdateCount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'IsCancelled',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'FolderUpdateCount',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'FileUpdateCount',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'FilesToUploadUpdateCount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['IsCancelled'])) {
        $this->IsCancelled = $vals['IsCancelled'];
      }
      if (isset($vals['FolderUpdateCount'])) {
        $this->FolderUpdateCount = $vals['FolderUpdateCount'];
      }
      if (isset($vals['FileUpdateCount'])) {
        $this->FileUpdateCount = $vals['FileUpdateCount'];
      }
      if (isset($vals['FilesToUploadUpdateCount'])) {
        $this->FilesToUploadUpdateCount = $vals['FilesToUploadUpdateCount'];
      }
    }
  }

  public function getName() {
    return 'TaskState';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->IsCancelled);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FolderUpdateCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FileUpdateCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->FilesToUploadUpdateCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TaskState');
    if ($this->IsCancelled !== null) {
      $xfer += $output->writeFieldBegin('IsCancelled', TType::BOOL, 1);
      $xfer += $output->writeBool($this->IsCancelled);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FolderUpdateCount !== null) {
      $xfer += $output->writeFieldBegin('FolderUpdateCount', TType::I32, 2);
      $xfer += $output->writeI32($this->FolderUpdateCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FileUpdateCount !== null) {
      $xfer += $output->writeFieldBegin('FileUpdateCount', TType::I32, 3);
      $xfer += $output->writeI32($this->FileUpdateCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->FilesToUploadUpdateCount !== null) {
      $xfer += $output->writeFieldBegin('FilesToUploadUpdateCount', TType::I32, 4);
      $xfer += $output->writeI32($this->FilesToUploadUpdateCount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class snaphappi_api_UploadInfo {
  static $_TSPEC;

  public $UploadType = null;
  public $ImageID = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'UploadType',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ImageID',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['UploadType'])) {
        $this->UploadType = $vals['UploadType'];
      }
      if (isset($vals['ImageID'])) {
        $this->ImageID = $vals['ImageID'];
      }
    }
  }

  public function getName() {
    return 'UploadInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UploadType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ImageID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('UploadInfo');
    if ($this->UploadType !== null) {
      $xfer += $output->writeFieldBegin('UploadType', TType::I32, 1);
      $xfer += $output->writeI32($this->UploadType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ImageID !== null) {
      $xfer += $output->writeFieldBegin('ImageID', TType::STRING, 2);
      $xfer += $output->writeString($this->ImageID);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
